#include <iostream>

template <typename T>
struct node {

    T data;
    node* left;
    node* right;

    node(T value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

template <typename T>
class BST {

    using node = node<T>;

private:

    node* root;

    // wstawianie elementu do drzzewa

    node* insert(node* current, T value) {

        if (current == nullptr) {

            return new node(value);

        }

        if (value < current->data) {

            current->left = insert(current->left, value);

        } else if (value > current->data) {

            current->right = insert(current->right, value);

        }

        return current;

    }

    // spawdzanie, czy element znajduje sie w drzewie

    bool search(node* current, T value) {

        if (current == nullptr) {

            return false;

        }

        if (value == current->data) {

            return true;

        }

        if (value < current->data) {

            return search(current->left, value);

        } else {

            return search(current->right, value);

        }
    }

    // wyświetlanie zawartości drzewa

    void traverse(node* current) {

        if (current != nullptr) {

            traverse(current->left);
            std::cout << current->data << " ";
            traverse(current->right);

        }
    }

public:

    // konstruuktor

    BST() {

        root = nullptr;

    }

    // publiczne metody dostępu do tych prywatnych, taki jakby interfejs

    void insert(T value) {

        root = insert(root, value);

    }

    bool search(T value) {

        return search(root, value);

    }

    void print() {

        traverse(root);
        std::cout << std::endl;

    }
};

int main()
{
    BST<int> tree;
}
